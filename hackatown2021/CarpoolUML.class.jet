{"diagram":"ClassDiagram","nodes":[{"x":1020,"y":190,"id":6,"type":"PointNode"},{"x":50,"name":"Roads and Intersections \nare equivalent to edges\nand vertices respectively.\nNot sure how to find \nintersections. Maybe\nby finding coords s.t.\nroad on coord = roadA\n= roadB","y":450,"id":3,"type":"NoteNode"},{"methods":"+ GeoJSONParser: ArrayList<Road>","x":1140,"name":"MapBuilder","y":330,"attributes":"","id":4,"type":"ClassNode"},{"methods":"<<constructors>>\n+ road(String name, int speedLimit, ArrayList<Double[]> coordinates)\n\n<<accessors>>\ngetCoordinates() : ArrayList<Double[]>\n\n<<mutators>>\n+ addAdj(Road road)","x":40,"name":"Road","y":20,"attributes":"<<identifiers>>\n+ String name\n+ ArrayList<Double[]> coordinates \n   // or linked list (going to next cord would be easier)\n<<params>>\n+ speedLimit : int \n+ trafficIndex : int\n+ adjList : ArrayList<Road>","id":0,"type":"ClassNode"},{"methods":"","x":300,"name":"Intersection","y":400,"attributes":"","id":1,"type":"ClassNode"},{"x":1110,"name":"Two ways to implement roads:\n- roads as hashmap:\n          - can find roads on each coodinate\n          - will contain duplicate instances of each road\n          - shortestPath can look for roads in a radius from the coordinate?\n- roads as ArrayList:\n          - can iterate through roads\n          - Finding individual roads will be slow\n          - implementation of pathfinding will be harder","y":30,"id":5,"type":"NoteNode"},{"methods":"<<constructors>> \n+ Carpool(String JSONPath, Hashmap<> users)\n+ Carpool(String JSONPath)\n\n<<accessors>>\n+ getUsers() : Hashmap<userID, {isPassenger, coordinates}>\n\n<<mutators>>\n+ addUser(int userID, boolean isPassenger, String coordinates) : boolean\n+ removeUser(int userID) : bool\n\n<<custom methods>>\n+ findMatches(ArrayList<> userIDs) : ArrayList<Tuple(int[], ArrayList<Road>)>\n\n<<Helper methods for findMatches>>\n- findClosestRoad(int userID) : Road\n// Pruning process\n- getPossibleCombinations(ArrayList<> userIDs) : ArrayList<int[]>\n// Finds the best path for each user (needs to be adapted to optimize for every user)\n- bestPath(ArrayList<ArrayList<Road>>) :  ArrayList<Road>\n","x":540,"name":"Carpool","y":350,"attributes":"- map : RoadNetwork\n- users : Hashmap<userID, {isPassenger, coordinates}>","id":8,"type":"ClassNode"},{"x":210,"y":320,"id":2,"type":"PointNode"},{"methods":"<<constructors>>\n+ RoadNetwork(String JSONPath)\n\n<<accessors>>\n+ getRoad(Double[] coordinates) : Road\n   // or getRoad(String name) : Road\n\n<<mutators>>\n\n<<custom methods>>\n- crawlAndIndex(Road road) // Helper method for the constructor\n+ shortestPath(Double[] A, Double[] B, Double step) : ArrayList<Road>\n+ shortestPathCanditates(Double[] A, Double[] B, Double step) : ArraList<ArrayList<Road>>","x":520,"name":"RoadNetwork","y":20,"attributes":"- roads: Hashmap<coordinates, ArrayList<Road>>\n- parser : MapBuilder","id":7,"type":"ClassNode"}],"edges":[{"middleLabel":"","start":7,"directionality":"Unidirectional","end":4,"type":"DependencyEdge"},{"middleLabel":"","start":7,"directionality":"Unidirectional","end":0,"type":"DependencyEdge"},{"middleLabel":"","start":8,"directionality":"Unidirectional","end":7,"type":"DependencyEdge"},{"middleLabel":"","start":7,"directionality":"Unidirectional","end":1,"type":"DependencyEdge"},{"start":1,"end":3,"type":"NoteEdge"},{"start":3,"end":2,"type":"NoteEdge"},{"start":5,"end":6,"type":"NoteEdge"}],"version":"3.1"}
